{"version":3,"sources":["actions/actions.js","actionCreators/actionCreators.js","Todo.js","sharedStyles.js","TodoList.js","AddTodo.js","RemoveAll.js","Filter.js","App.js","serviceWorker.js","reducer/reducer.js","store.js","index.js"],"names":["SET_FILTER","SET_TODOS","ADD_TODO","REMOVE_TODO","REMOVE_ALL","COMPLETE_STATUS","SHOW_NOTIFICATION","showNotification","value","type","Todos","styled","div","Span","span","connect","dispatch","removeTodo","todo","id","completeStatus","todos","props","content","itemClass","checked","className","onClick","e","stopPropagation","Rainbow","css","Title","h3","Todolist","Todotitle","TodoList","this","title","length","map","key","React","Component","AddTodo","addTodo","newTodo","Math","random","state","inputVal","changeInput","bind","addTodoEvent","newVal","target","setState","event","preventDefault","onSubmit","style","margin","onChange","placeholder","Button","button","RemoveAll","removeAll","options","label","labelKey","Filters","Filter","console","log","textAlign","option","changeFilter","activeFilter","filter","newFilter","setFilter","GlobalStyles","createGlobalStyle","toast","configure","Wrapper","App","filterTodos","filterType","localTodos","window","localStorage","getItem","JSON","parse","setTodos","prevProps","prevState","snapshot","stringify","setItem","Boolean","location","hostname","match","rootReducer","action","concat","currentTodo","autoClose","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12ad1603.chunk.js","sourcesContent":["export const SET_FILTER = \"SET_FILTER\";\r\nexport const SET_TODOS = \"SET_TODOS\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const REMOVE_ALL = \"REMOVE_ALL\";\r\nexport const COMPLETE_STATUS = \"COMPLETE_STATUS\";\r\nexport const SHOW_NOTIFICATION = \"SHOW_NOTIFICATION\";\r\nexport const HIDE_NOTIFICATION = \"HIDE_NOTIFICATION\";\r\n","import {\r\n  SET_FILTER,\r\n  SET_TODOS,\r\n  ADD_TODO,\r\n  REMOVE_TODO,\r\n  REMOVE_ALL,\r\n  COMPLETE_STATUS,\r\n  SHOW_NOTIFICATION\r\n} from \"../actions/actions\";\r\n\r\nexport function setFilter(newFilter) {\r\n  return { type: SET_FILTER, activeFilter: newFilter };\r\n}\r\n\r\nexport function setTodos(todos) {\r\n  return { type: SET_TODOS, todos };\r\n}\r\n\r\nexport function addTodo(todo) {\r\n  return { type: ADD_TODO, todo };\r\n}\r\n\r\nexport function removeTodo(id) {\r\n  return { type: REMOVE_TODO, id };\r\n}\r\n\r\nexport function removeAll(todos) {\r\n  return { type: REMOVE_ALL, todos };\r\n}\r\n\r\nexport function completeStatus(id) {\r\n  return { type: COMPLETE_STATUS, id };\r\n}\r\n\r\nexport function showNotification(value) {\r\n  return { type: SHOW_NOTIFICATION, value }\r\n}\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeTodo, completeStatus, showNotification } from \"./actionCreators/actionCreators\";\r\nimport styled from 'styled-components';\r\n\r\n//text-decoration: ${props => !props.checked ? 'line-through' : null } onClickle senkronize olduğu için mi çalışmadı\r\n\r\nconst Todos = styled.div`\r\n  display: block;\r\n  padding: 5px;\r\n  border-bottom: 1px solid green;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n`\r\nconst Span = styled.span`\r\n  float: right;\r\n`\r\nfunction Todo(props) {\r\n  const { content, id, checked } = props;\r\n  let itemClass = \"todo-item\";\r\n  if (checked) {\r\n    itemClass += \" checked\";\r\n  }\r\n\r\n  return (\r\n    <Todos\r\n      className={itemClass}\r\n      onClick={() => {\r\n        props.completeStatus(id);\r\n      }}\r\n    >\r\n      {content}\r\n      <Span\r\n        onClick={e => {\r\n          e.stopPropagation();\r\n          props.removeTodo(id);\r\n          props.showNotification(\"Todo was deleted\")\r\n        }\r\n      }\r\n      >\r\n        X\r\n      </Span>\r\n    </Todos>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  removeTodo: todo => {\r\n    dispatch(removeTodo(todo));\r\n  },\r\n  completeStatus: todos => {\r\n    dispatch(completeStatus(todos));\r\n  },\r\n  showNotification: (value) => {\r\n    dispatch(showNotification(value))\r\n  }\r\n});\r\nexport default connect(null, mapDispatchToProps)(Todo);\r\n","import styled from 'styled-components';\r\n\r\nimport {css} from 'styled-components';\r\n\r\nconst Rainbow = css`\r\n  background: linear-gradient(to right, rgba(236, 146, 86, 0.87) , rgba(236, 221, 86, 0.87), rgba(133, 236, 86, 0.87), rgba(86, 231, 236, 0.87), rgba(86, 96, 236, 0.87), rgba(236, 86, 211, 0.87));\r\n`\r\n\r\nconst Title = styled.h3`\r\n${Rainbow}\r\ntext-align: center;\r\ncolor: #fff;\r\npadding: 15px;\r\nborder-radius: 5px;\r\nmargin-top: 30px;\r\nmargin-bottom: 20px;\r\n`\r\n\r\n\r\nexport { Rainbow, Title };","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport styled from 'styled-components';\r\nimport { Title } from \"./sharedStyles\";\r\n\r\nconst Todolist = styled.div`\r\n  width: 50rem;\r\n  align-items: center;\r\n`\r\nconst Todotitle = styled(Title)`\r\n  margin-top: 35px;\r\n  font-size: 22px;\r\n`\r\n;\r\nclass TodoList extends React.Component {\r\n  render() {\r\n    return (\r\n      <Todolist className=\"todo-list\">\r\n\r\n        <Todotitle>\r\n          {this.props.title} ({this.props.todos.length})\r\n        </Todotitle>\r\n\r\n        {this.props.todos.map(todo => {\r\n          return (\r\n            <Todo\r\n              {...todo}\r\n              key={todo.id}\r\n            />\r\n          );\r\n        })}\r\n      </Todolist>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo, showNotification } from \"./actionCreators/actionCreators\";\r\n\r\n\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputVal: \"\"\r\n    };\r\n    this.changeInput = this.changeInput.bind(this);\r\n    this.addTodoEvent = this.addTodoEvent.bind(this);\r\n  }\r\n\r\n  \r\n\r\n  changeInput(e) {\r\n    const newVal = e.target.value;\r\n    this.setState({\r\n      inputVal: newVal\r\n    });\r\n  }\r\n  \r\n  \r\n\r\n  addTodo = (newTodo) => {\r\n    this.props.addTodo({\r\n      content: newTodo,\r\n      id: Math.random(),\r\n      checked: false\r\n    });\r\n  }\r\n\r\n  addTodoEvent(event) {\r\n    event.preventDefault();\r\n    this.addTodo(this.state.inputVal);\r\n    this.props.showNotification(\"Todo was added\")\r\n    this.setState({\r\n      inputVal: \"\"\r\n    });\r\n  }\r\n  // Boş Todo ekliyor önüne geçemedim henüz\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.addTodoEvent}>\r\n        <div className=\"input-field\" style={{margin: \"35px 0 35px 0\" }}>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.inputVal}\r\n            onChange={this.changeInput}\r\n            placeholder=\"Add Todo...\"\r\n          />\r\n        </div>\r\n        \r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n  addTodo: todos => {\r\n    dispatch(addTodo(todos));\r\n  },\r\n  showNotification: (value) => {\r\n    dispatch(showNotification(value))\r\n  }\r\n \r\n});\r\nexport default connect(null, mapDispatchToProps)(AddTodo);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeAll } from \"./actionCreators/actionCreators\";\r\nimport styled from 'styled-components';\r\nimport {Rainbow} from './sharedStyles';\r\n\r\n\r\nconst Button = styled.button`\r\n${Rainbow}\r\nfont-family: 'Sulphur Point', sans-serif;\r\nfont-weight: light;\r\nletter-spacing: 2px;\r\nfont-size: 22px;\r\ntext-align: center;\r\ncolor: #fff;\r\npadding: 15px;\r\nmargin: 0;\r\nwidth: 50rem;\r\nborder-radius: 5px;\r\nmargin-bottom: 35px;\r\ncursor: pointer;\r\n`\r\n\r\n\r\nclass RemoveAll extends React.Component {\r\n  render() {\r\n    return (\r\n      <Button\r\n        className=\"remove-all\"\r\n        onClick={() => {\r\n          this.props.removeAll();\r\n        }}\r\n      >\r\n        Tümünü Sil\r\n      </Button>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  removeAll: todos => {\r\n    dispatch(removeAll(todos));\r\n  }\r\n});\r\nexport default connect(null, mapDispatchToProps)(RemoveAll);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"./actionCreators/actionCreators\";\r\nimport styled from 'styled-components';\r\n\r\nconst options = [\r\n  { label: \"Hepsi\", labelKey: \"all\" },\r\n  { label: \"Tamamlanmış\", labelKey: \"completed\" },\r\n  { label: \"Tamamlanmamış\", labelKey: \"uncompleted\" }\r\n];\r\n\r\nconst Filters = styled.div`\r\n  display: inline-block;\r\n  width: 200px;\r\n  margin: 10px;\r\n  font-size: 20px;\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n  transition: all .3s ease\r\n  cursor: pointer;\r\n\r\n  &:hover { box-shadow: 5px 5px 5px 0px rgba(195,75,219,1); }\r\n  &:active {transform: scale(.96); }\r\n  &:first-child {\r\n    background: rgba(86, 96, 236, 0.87);\r\n  }\r\n  &:nth-child(2){\r\n    background: rgba(236, 86, 211, 0.87);\r\n  }\r\n  &:last-child {\r\n    background: rgba(236, 221, 86, 0.87);\r\n  }\r\n`\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div className=\"filter-container\" style={{ textAlign: \"center\"}}>\r\n        {options.map(option => {\r\n          return (\r\n            <Filters onClick={() => this.props.changeFilter(option.labelKey)}>\r\n              {option.label}\r\n            </Filters>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    activeFilter: state.filter\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeFilter: newFilter => {\r\n    dispatch(setFilter(newFilter));\r\n  }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setTodos } from \"./actionCreators/actionCreators\";\r\nimport TodoList from \"./TodoList\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport RemoveAll from \"./RemoveAll\";\r\nimport Filter from \"./Filter\";\r\nimport \"./App.css\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { toast } from 'react-toastify';\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport { Title } from \"./sharedStyles\";\r\nconst GlobalStyles = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css?family=Sulphur+Point&display=swap');\r\n  @import url('https://fonts.googleapis.com/css?family=Cantarell');\r\n  \r\n  body {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center\r\n    font-family: 'Sulphur Point', sans-serif;\r\n    font-weight: light;\r\n    letter-spacing: 2px;\r\n    font-size: 22px;\r\n    font-size: 100%;\r\n    line-height: 1.5;\r\n  }\r\n`\r\n\r\ntoast.configure()\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  heigh: 98vh;\r\n`\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    // Component oluştuktan sonra gerekli olan datayı localstoragedan geyiriyoruz.\r\n    let localTodos = window.localStorage.getItem(\"todos\");\r\n    if (localTodos) {\r\n      localTodos = JSON.parse(localTodos);\r\n    }\r\n    // Getirdiğimiz datayı state'e kaydediyoruz.\r\n    this.props.setTodos(localTodos || []);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (JSON.stringify(prevProps.todos) !== JSON.stringify(this.props.todos)) {\r\n      window.localStorage.setItem(\"todos\", JSON.stringify(this.props.todos));\r\n    }\r\n  }\r\n\r\n  filterTodos = (todos, filterType) => {\r\n    if (filterType === \"all\") {\r\n      return todos;\r\n    } else if (filterType === \"completed\") {\r\n      return todos.filter(todo => todo.checked);\r\n    } else {\r\n      return todos.filter(todo => !todo.checked);\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper className=\"App\" id=\"todo\">\r\n        <GlobalStyles />\r\n        <div className=\"todo-list todo-list-add\">\r\n          <Title>To-do's</Title>\r\n            <AddTodo  />\r\n            <RemoveAll />\r\n            <Filter />\r\n        </div>\r\n\r\n        <TodoList\r\n          title=\"TodoList\"\r\n          todos={this.filterTodos(this.props.todos, this.props.activeFilter)}\r\n          \r\n        />\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    activeFilter: state.filter,\r\n    todos: state.todos\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setTodos: todos => {\r\n    dispatch(setTodos(todos));\r\n  },\r\n \r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n/* <TodoList\r\n  title=\"Tamamlanmamış Todolar\"\r\n  todos={this.state.todos.filter(todo =>\r\n  {\r\n    return !todo.checked;\r\n  })}\r\n  onTodoRemove={this.removeTodo}\r\n  onCheckedToggle={this.toggleCompleteStatus}\r\n/>\r\n\r\n  <TodoList\r\n    title=\"Tamamlanmış Todolar\"\r\n    todos={this.state.todos.filter(todo =>\r\n    {\r\n      return todo.checked;\r\n    })}\r\n    onTodoRemove={this.removeTodo}\r\n    onCheckedToggle={this.toggleCompleteStatus}\r\n  /> */\r\n\r\n//todolist presentational component\r\n// app container component\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  SET_FILTER,\r\n  SET_TODOS,\r\n  ADD_TODO,\r\n  REMOVE_TODO,\r\n  REMOVE_ALL,\r\n  COMPLETE_STATUS,\r\n  SHOW_NOTIFICATION,\r\n  \r\n} from \"../actions/actions\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { toast } from 'react-toastify';\r\n\r\ntoast.configure()\r\n\r\nconst rootReducer = function(\r\n  state = {\r\n    filter: \"all\",\r\n    todos: []\r\n  },\r\n  action\r\n) {\r\n\r\n  switch (action.type) {\r\n    case SET_FILTER:\r\n      return {\r\n        ...state,\r\n        filter: action.activeFilter\r\n      };\r\n    case SET_TODOS:\r\n      return {\r\n        ...state,\r\n        todos: action.todos\r\n      };\r\n    case ADD_TODO:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.concat([action.todo])\r\n      };\r\n    case REMOVE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter(todo => {\r\n          return todo.id !== action.id;\r\n        })\r\n      };\r\n    case REMOVE_ALL:\r\n      return {\r\n        ...state,\r\n        todos: []\r\n      };\r\n    case COMPLETE_STATUS:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo => {\r\n          if (action.id === todo.id) {\r\n            let currentTodo = { ...todo };\r\n            currentTodo.checked = !currentTodo.checked;\r\n            return currentTodo;\r\n          } else {\r\n            return todo;\r\n          }\r\n        })\r\n      };\r\n      \r\n      case SHOW_NOTIFICATION:\r\n          toast(action.value, {autoClose: 2000})\r\n        return {\r\n          ...state,\r\n        }\r\n        \r\n    default:\r\n      return state;\r\n  }\r\n\r\n  ///action.filter ?????\r\n  // object.assign({}, state, {filter: action.filter})\r\n};\r\n\r\nexport default rootReducer;\r\n\r\n// if (!state) {\r\n//   state = {\r\n//     filter: \"all\"\r\n//   };\r\n// }\r\n// ES5'teki yazımı böyle ES6da yukarıdaki gibi yapılabilir\r\n// bunları birbirine compile edebilen tool babel rapel\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer/reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nconst ProvideApp = props => (\r\n  <Provider store={store}>\r\n    <App />{\" \"}\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<ProvideApp />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// higherorderfunction map state to props\r\n"],"sourceRoot":""}